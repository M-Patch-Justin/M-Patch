The SDK supports two types of wallets: one-time wallets and persistent wallets.

One-time wallets are created temporarily when in use and only exist in memory; they become invalid after shutdown. Persistent wallets will be persistently saved when they are created. After turning off and on again, the persistent wallet that has been created before can be loaded.

Note: The persistence implementation method in /vendor/common/storage is for reference only. In commercial products, it is recommended to consider a more secure persistence method based on actual hardware capabilities.

When creating and loading a wallet, you should always call BiotWalletCreate() in the same thread.

When creating a wallet, you need to pass in wallet configuration parameters according to the specific blockchain protocol. The function of creating a wallet is described as follows:

BSINT32 BiotWalletCreate(BiotProtocolType protocol_type,
                         const BCHAR *wallet_name_str,
                         const void *wallet_config_ptr,
                         BUINT32 wallet_config_size);
                         
Parameters:

parameter name	Parameter Description
protocol_type	The blockchain protocol. See biottypes.h for supported protocol.
wallet_name_str	A string of wallet name.
If the given <wallet_name_str> is NULL, a one-time wallet is created.
Otherwise a persistent wallet with the given name will be created or loaded.
wallet_config_ptr	Configuration (e.g. crypto key) for the wallet.
The exact configuration definition is determinted by the specified <protocol_type>.
wallet_config_size	Size (in byte) of configuration specified by <wallet_config_ptr>.
return value: This function returns the non-negative index of the loaded wallet. It returns -1 if wallet creation fails.

Example(Internally generated private key):

BiotEthWallet *g_ethereum_wallet_ptr = NULL;
BiotEthWalletConfig wallet_config    = {0};

/* wallet_config value assignment */
wallet_config.prikeyCtx_config.prikey_genMode = BIOT_WALLET_PRIKEY_GENMODE_INTERNAL_GENERATION;
wallet_config.prikeyCtx_config.prikey_type    = BIOT_WALLET_PRIKEY_TYPE_SECP256K1;

wallet_config.chain_id             = 1;
wallet_config.eip155_compatibility = BIOT_TRUE;
strncpy(wallet_config.node_url_str, demoUrl, BIOT_ETH_NODE_URL_MAX_LEN - 1);

/* create ethereum wallet */
index = BiotWalletCreate( BIOT_PROTOCOL_ETHEREUM, "bioteth.keystore", &wallet_config, sizeof(BiotEthWalletConfig) );

Unloading the wallet will unload the wallet from the memory. It will not delete the persistent wallet, but the persistent wallet cannot be used until it is loaded again.

void BiotWalletUnload(BSINT32 wallet_index);
Parameters:

parameter name	Parameter Description
wallet_index	The wallet index to unload.
Delete Wallet

Deleting the wallet will delete the persistent wallet. If the wallet has been loaded before the deletion, the persistent wallet will become a one-time wallet, which can still be used before being unloaded.

BIOT_RESULT BiotWalletDelete(BCHAR *wallet_name_str);
Parameters:

parameter name	Parameter Description
wallet_name_str	The wallet name to delete. 

Key Generation
The key that needs to be configured when creating a wallet can be inputted externally or generated by the SDKï¼Œthis is achieved by setting prikeyCtx_config.prikey_genMode to the corresponding value.

Transfer Call
Token is transferred from this account to the other accounts (not all blockchain protocols support transfers).

Take Ethereum as an example:

BIOT_RESULT BiotEthTransfer(BiotEthTx *tx_ptr, BCHAR *value_hex_str);
Parameters:

parameter name	Parameter Description
tx_ptr	Transaction pointer.
value_hex_str	A string representing the value (Unit: wei) to transfer, in HEX format like "0x89AB3C".
Note that decimal value is not accepted. If a decimal value such as "1234" is specified, it's treated as "0x1234".
return value: This function returns BIOT_SUCCESS if transfer is successful. Otherwise it returns one of the error codes.

