If the automatic generation tool cannot generate the C call interface, you need to manually construct the transaction message. In addition, because the Fabric and hwbcs invocation itself is so convenient that there is no need to use automatically generate interface tools, all contracts need to be invoked manually.

The manual construction of transactions needs to follow the ABI interface of the specific blockchain protocol.

Example 1: Ethereum transaction structure

Step 1 Call BiotEthTxInit() to initialize the transaction

Step 2 Set transaction parameters -Set transaction parameter nonce:

BIOT_RESULT BiotEthTxSetNonce(BiotEthTx *tx_ptr, BUINT64 nonce);
Nonce is usually set to BIOT_ETH_NONCE_AUTO, and the nonce value is obtained from the network.

-If necessary, set the "value" parameter of the transaction(in the initialized transaction object, value defaults to 0):

BIOT_RESULT BiotEthTxSetValue(BiotEthTx *tx_ptr, BiotFieldMax32B *value_ptr);
Step 3 For contract calls (transactions) that change the state of the blockchain, set the "data" parameter of the transaction:

BIOT_RESULT BiotEthTxSetData(BiotEthTx *tx_ptr, BiotFieldVariable *data_ptr);
Among them, the format of data_ptr follows the Ethereum ABI, including the first 4 bytes of the Keccak-256 hash of the contract function prototype as the Function Selector, and then the parameters are arranged in sequence: https://solidity.readthedocs.io/en/develop/abi-spec.html

Step 4 Send transaction

For contract calls that change the state of the blockchain, the following contract functions are called:

BIOT_RESULT BiotEthTxSend(BiotEthTx *tx_ptr);
For contract calls that do not change the state of the blockchain, call the State-less contract function

BCHAR *BiotEthCallContractFunc(BiotEthTx *tx_ptr,
                              BCHAR *func_proto_str,
                              BUINT8 *func_param_ptr,
                              BUINT32 func_param_len);
Among them, the format of func_param_ptr follows the same rules as Step 3.

**Example 2: PlatONE transaction structure

Step 1 Call BiotPlatONETxInit() to initialize the transaction, and the transaction type field is set according to the actual transaction type.

Step 2 Set transaction parameter:

Biot_RESULT BiotPlatoneTxSetNonce(BiotEthTx *tx_ptr, BUINT64 nonce); 
The nonce is usually set to BIOT_PLATONE_NONCE_AUTO, and the nonce value is obtained from the network.

If necessary, set the "value" parameter of the transaction (in the initialized transaction object, value defaults to 0):
BIOT_RESULT BiotPlatoneTxSetValue(BiotEthTx *tx_ptr, BiotFieldMax32B *value_ptr);
Step 3 For contract calls (transactions) that change the state of the blockchain, set the "data" parameter of the transaction:

BIOT_RESULT BiotPlatoneTxSetData(BiotEthTx *tx_ptr, BiotFieldVariable *data_ptr);
Among them, data_ptr is coded according to RLP and is sequentially compiled into the following fields:

{
  TransactionType (Fixed unsigned 64bit, BigEndian),
  FunctionName,
  FunctionArgument1,
  FunctionArgument2,
…
}
RLP encoding is as follows:

a) Call RlpInitListObject() to initialize the top-level LIST object
b) Call RlpInitStringObject() to initialize the first encoding field object
c) Call RlpEncoderAppendObjectToList() to add the first encoding field object to the top-level LIST object
d) Repeat b and c until all code objects are added to the top LIST object
e) Call RlpEncode() to perform RLP encoding on the top-level LIST object and its subobjects
f) Call RlpGetEncodedStream() to get the encoded stream
g) After completing the contract call, call RlpRecursiveDeleteObject() to destroy the top-level LIST object and all its child objects
Step 4 Send transaction

For contract calls that change the state of the blockchain, the following contract functions are called:

BIOT_RESULT BiotPlatoneTxSend(BiotEthTx *tx_ptr);
For contract calls that do not change the state of the blockchain, call the State-less contract function

BCHAR *BiotPlatoneCallContractFunc(BiotPlatoneTx *tx_ptr,
                                  BUINT8 *rlp_param_ptr,
                                  BUINT32 rlp_param_len)
Among them, the format of rlp_param_ptr follows the same rules as Step 3.

For the specific calling method, please refer to the automatically generated code of the Demo attached to the SDK, which is located under <SDKRoot>/contract/generated.

Example 3: Hyperledger Fabric transaction structure

Step 1 Call BiotHlfabricTxInit() to initialize the transaction, The parameters are set based on actual usage.

Step 2 If the node discovery function is not turned on,call BiotHlfabricWalletSetNetworkInfo() to set the newwork parameters.

Step 3 Call BiotHlfabricTxSetTimestamp() to set timestamp, The real-time is obtained based on hardware functions.

Step 4 If the node discovery function is turned on,call BiotHlfabricDiscoverySubmit() to get all the nodes information on current chain.

Step 5 Set trasaction parameters.
Examples of using demo_fabric_abac.c code:

result = BiotHlfabricTxSetArgs(&tx_ptr, "invoke", "a", "b", "10", NULL);
All function call of Fabric's input data are string. In the above code, "invoke" is the function name in the ABAC chain code. "a", "b", and "10" are the corresponding three inputs to the function. Regardless of the type of the corresponding variable in the chain code, the shape of string is used as the input.This is why there is no need to use automatically generate the contract interface tool.

Step 6 Send the transaction.

For contract calls that change the state of the blockchain, call the BiotHlfabricTxSubmit function：

BIOT_RESULT BiotHlfabricTxSubmit(BiotHlfabricTx *tx_ptr);
For contract calls that do not change the state of the blockchain, call the BiotHlfabricTxEvaluate contract function：

BIOT_RESULT BiotHlfabricTxEvaluate(BiotHlfabricTx *tx_ptr);
When the return result is BIOT_SUCCESS, the call succeeds。

Example 4: HW BCS transaction structure

Step 1 Call BiotHwbcsTxInit() to initialize the transaction, The parameters are set based on actual usage.

Step 2 Call BiotHwbcsWalletSetNetworkInfo() to set the newwork parameters.

Step 3 Call BiotHwbcsTxSetTimestamp() to set timestamp, The real-time is obtained based on hardware functions.

Step 4 Set trasaction parameters.
Examples of using demo_hw_bcs.c code:

result = BiotHwbcsTxSetArgs(&tx_ptr, "initMarble", "a","1" , NULL, NULL);
All function call of Hwbcs's input data are string. In the above code, "initMarble" is the function name in the hw chain code. "a", "1" are the corresponding two inputs to the function. Regardless of the type of the corresponding variable in the chain code, the shape of string is used as the input.This is why there is no need to use automatically generate the contract interface tool.

Step 5 Send the transaction.

For contract calls that change the state of the blockchain, call the BoatHwbcsTxSubmit function：

BIOT_RESULT BiotHwbcsTxSubmit(BiotHwbcsTx *tx_ptr)
For contract calls that do not change the state of the blockchain, call the BiotHwbcsTxEvaluate contract function：

BIOT_RESULT BiotHwbcsTxEvaluate(BiotHwbcsTx *tx_ptr);
When the return result is BIOT_SUCCESS, the call succeeds。

Example 5: CHAINMAKER transaction structure

Step 1 Call biotHlChainmakerTxInit() to initialize the transaction, The parameters are set based on actual usage.

Step 2 Call BiotHlchainmakerAddTxParam() to set transaction parameters.

Examples of using code:

 BiotHlchainmakerAddTxParam(&tx_ptr, 6, "time", "6543235", "file_hash", "ab3456df5799b87c77e7f85", "file_name", "name005", NULL);
Step 3 Call BiotHlchainmakerContractInvoke() invoke transaction.

Step 4 Call BiotHlchainmakerContractQuery() query transaction.
