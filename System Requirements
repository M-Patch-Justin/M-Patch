Part 1- Storage Requirements
To enable Ethereum/PlatONE/FISCO BCOS capabilities, the storage requirements of the C-language BIOT Framework (excluding static or shared dependent libraries such as the C library) are:

Flash (code and read-only data): about 210kB
Flash (non-volatile RW data): hundreds of bytes
RAM (global variables, heap, stack): about 10kB

To enable HyperLedger Fabric capability, the storage requirements of the C-language BIOT Framework (excluding static or shared dependent libraries such as the C library) are:

Flash (code and read-only data): about 520kB
Flash (non-volatile RW data): thousands of bytes
RAM (global variables, heap, stack): about 30kB
In both cases, the storage requirements do not include the system libraries that the BIOT Framework SDK (C language version) relies on. The exact values may vary with different blockchain protocols.

Part 2- Process Capacity Requirements
To Ethereum blockchain protocol, the BIOT Framework (C language version) takes about 1 second (excluding network communication time) to complete the cryptographic operations for a blockchain transaction or smart contract call, running on an ARM Cortex M4 at around 100MHz. The exact time can vary with different blockchain protocols.

The exact processing power requirements depend on the power consumption and latency requirements of the application that calls the BIOT Framework SDK. BoAT itself has no special requirements.

Part 3- Operating System and Communication Requirements
There are no special requirements concerning the operating system. Generally, BIOT Framework (C language version) can be ported over most operating systems (e.g., Linux, various RTOS), as long as the following capabilities (below) are supported:

Supports dynamic memory allocation/release.

Supports mutual exclusion (mutex) protection mechanism.

Supports thread suspension for a specified duration (optional). BoAT cannot support "timeout" or "polling" functions without the support of the "thread suspension" function, while other functions have no such dependency.

From the candidate random number generators list, select to support at least one type in the order of priority: 
(1) TRNG, true random number generator (requires hardware support) 
(2) CSPRNG, a cryptographically secure pseudo-random number generator. For Linux, this capability can be provided by the OpenSSL library 
(3) PRNG, a (non-cryptographically secure) pseudo-random number generator 

At least one of the following times (for pseudo random number seed and timeslots in data and logfiles) is supported in descending order of priority: 
(1) RTC time that can be consistent with the real-time through protocols such as NTP 
(2) RTC time needs to be set manually 
(3) Tick since power on 

According to priority from high to low, at least one of the following communication protocols is supported: 
(1) HTTP / HTTPS (for Linux, this capability can be provided by the curl library) 
(2) CoAP 
(3) MQTT 
(4) TCP 

The communication protocol follows the operator's requirements if the device can only connect to a specific operator or service provider (such as OneNET, OceanConnect).

Supports commonly used standard C library functions such as memcpy(), strcpy(), snprintf()(optional for I/O-related functions such as printf()).

If the cellular IoT module utilizes a Linux operating system, it should support adb or similar login mechanism and have root privileges during debugging.

Part 4- TEE and Remote Attestation (optional)
TEE
If the application processor of the cellular module supports the TEE (Trusted Execution Environment), the TEE can be used to protect sensitive data such as keys, signatures as well as sensitive processes like encryption. The TEE should support at least the following capabilities:

Allowing customers to develop a TA (Trusted Application). For example, some necessary keys are offered.
Supporting Secure Boot, fuse, etc.
Support for secure storage
Remote Attestation
Remote attestation is a mechanism that uses the Root of Trust embedded in the chip to provide signature services for device data, and may probe device operating environment characteristic information. Remote attestation can help service providers remotely authenticate the authenticity of equipment. If the module's chip supports remote authentication, it should support at least the following capabilities:

Supports authentication signatures on a given data and can be verified on a remote server
If the TEE is supported, the data should be signed in TEE (optional)
Part 5- Cryptography Hardware Acceleration (optional)
If the hardware supports cryptography operation acceleration, the cryptography operation performance can be improved.

For Ethereum/PlatONE/FISCO BCOS, BIOT needs at least the following cryptographic operations:

Elliptic curve signature ECDSA (secp256k1 curve)
Keccak-256 (Keccak-256 is a variant of SHA3-256)
For HyperLedger Fabric, BoAT needs at least the following cryptographic operations:

Elliptic curve signature ECDSA (secp256r1 curve)
SHA2-256
